@model ProyectoMPLS.Models.Topologia.EnlaceViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">Configuración de Enlace</h4>
</div>

@using (Html.BeginForm("_ConfigEnlace", "Topologia", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "DataFormEnlace" }))
{
    <div class="modal-body">

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.idProyecto, new { id = "tbxIdProyecto" })
        @Html.HiddenFor(model => model.idEnlace, new { id = "tbxIdEnlace" })
        
        @Html.HiddenFor(model => model.idRouterA, new { id = "tbxIdRouterA" })
        @Html.HiddenFor(model => model.idRouterB, new { id = "tbxIdRouterB" })

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.cNombre)
            </label>
            <div class="col-md-6">
                @Html.EditorFor(model => model.cNombre, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enlace_" + Model.idEnlace }})
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.cNombre, "", new { @class = "text-danger" }).ToHtmlString()))
            </div>
        </div>

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.cNombreRouterA)
            </label>
            <div class="col-md-6">
                @Html.EditorFor(model => model.cNombreRouterA, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"} })
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.cNombreRouterA, "", new { @class = "text-danger" }).ToHtmlString()))
            </div>
        </div>

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.cNombreRouterB)
            </label>
            <div class="col-md-6">
                @Html.EditorFor(model => model.cNombreRouterB, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.cNombreRouterB, "", new { @class = "text-danger" }).ToHtmlString()))
            </div>
        </div>

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.nBandwidth)
            </label>
            <div class="col-md-6">
                @Html.EditorFor(model => model.nBandwidth, new { htmlAttributes = new { @class = "form-control", @type = "number", min = "0" } })
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nBandwidth, "", new {@class = "text-danger"}).ToHtmlString()))
            </div>
            <div class="col-md-3">
                <p class="help-block">Mbps</p>
            </div>
        </div>

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.nPesoAdministrativo)
            </label>
            <div class="col-md-6">
                @Html.EditorFor(model => model.nPesoAdministrativo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nPesoAdministrativo, "", new { @class = "text-danger" }).ToHtmlString()))
            </div>
        </div>

        <div class="form-group">
            <label for="focusedinput" class="col-sm-3 control-label">
                @Html.LabelFor(model => model.idAfinidad)
            </label>
            <div class="col-md-6">
                @Html.DropDownListFor(model => model.idAfinidad, Model.dpAfinidades, new { @class = "form-control", @id = "dpxAfinidades" })
                @Html.ValidationMessageFor(model => model.idAfinidad, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="form-group">
                <label for="focusedinput" class="col-sm-3 control-label">
                    @Html.LabelFor(model => model.nTipoMetrica)
                </label>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.nTipoMetrica, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nTipoMetrica, "", new { @class = "text-danger" }).ToHtmlString()))
                </div>
            </div>*@
    </div>

    @*<div id="error"></div>*@

    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cerrar</button>
        <a class="btn btn-primary" id="submitConfigEnlace">Guardar</a>
    </div>
}

<script>
    $(document).ready(function () {
        console.log("IDRouterA " + $("#tbxIdRouterA").val());
        console.log("IDRouterB " + $("#tbxIdRouterA").val());
            $("#submitConfigEnlace").click(function () {
                var form = $("#DataFormEnlace")[0];
                var formData = new FormData(form);
                //console.log($("DataFormEnlace"));
                //console.log(form);
                //console.log(formData);

                $.ajax({
                    url: '@Url.Action("_ConfigEnlace", new { controller = "Topologia" })',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    data: formData,
                    success: function (result) {
                        console.log('Funciona');
                        if (result.success) {
                            //whatever
                            $('#myModal').modal('hide');
                            // window.location.reload(true);   //refresh page
                        } else {
                            $('#myModalContent').html(result);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(textStatus);
                        console.log(errorThrown);
                        console.log(jqXHR.responseText);
                        //$("#error").html(jqXHR.responseText);
                    },
                    //error: function (error) { console.log('no funciona'); $("#error").html(error); }
                });
            });
        });
</script>

