@model ProyectoMPLS.Models.Topologia.CSPFViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">Ruteo por CSPF</h4>
</div>

@using (Html.BeginForm("_CrearCSPF", "Enrutamiento", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "DataFormCSPF" }))
{
    <div class="modal-body">

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    @Html.HiddenFor(model => model.idProyecto)
    @Html.HiddenFor(model => model.idLSP)

        <div class="row">
            <div class="col-sm-6">

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.cNombre)
                    </label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.cNombre, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.cNombre, "", new {@class = "text-danger"}).ToHtmlString()))
                    </div>
                </div>

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.nBandwidth)
                    </label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.nBandwidth, new {htmlAttributes = new {@class = "form-control", @type = "number", min = "0"}})
                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nBandwidth, "", new {@class = "text-danger"}).ToHtmlString()))
                    </div>
                    <div class="col-md-3">
                        <p class="help-block">Mbps</p>
                    </div>
                </div>

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.nTipoMetrica)
                    </label>
                    <div class="col-md-6">
                        <div class="radio">
                            <label for="nTipoMetrica_1" data-toggle="tooltip" data-placement="right" title="Emplea los pesos definidos manualmente para cada enlace.">
                                @Html.RadioButtonFor(model => model.nTipoMetrica, "1")
                                Pesos Administrativos
                            </label>
                        </div>
                        <div class="radio">
                            <label for="nTipoMetrica_2" data-toggle="tooltip" data-placement="right" title="Emplea la cantidad de saltos como métrica.">
                                @Html.RadioButtonFor(model => model.nTipoMetrica, "2")
                                Mínima Cantidad de Saltos
                            </label>
                        </div>
                        <div class="radio">
                            <label for="nTipoMetrica_3" data-toggle="tooltip" data-placement="right" title="Da preferencia a los enlaces con mayor BW Reservado.">
                                @Html.RadioButtonFor(model => model.nTipoMetrica, "3")
                                BW Reservado
                            </label>
                        </div>
                        <div class="radio">
                            <label for="nTipoMetrica_4" data-toggle="tooltip" data-placement="right" title="Da preferencia a los enlaces con mayor BW Disponible.">
                                @Html.RadioButtonFor(model => model.nTipoMetrica, "4")
                                BW Disponible
                            </label>
                        </div>

                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nTipoMetrica, "", new { @class = "text-danger" }).ToHtmlString()))
                    </div>
                </div>

            </div>
            <div class="col-sm-6">

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.nRouterOrigen)
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.nRouterOrigen, Model.listaNodos, new {@class = "form-control", id = "dpxRouterOrigen"})
                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nRouterOrigen, "", new {@class = "text-danger"}).ToHtmlString()))
                    </div>
                </div>

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.nRouterDestino)
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.nRouterDestino, Model.listaNodos, new {@class = "form-control", id = "dpxRouterDestino"})
                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.nRouterDestino, "", new {@class = "text-danger"}).ToHtmlString()))
                    </div>
                </div>

                <div class="form-group">
                    <label for="focusedinput" class="col-sm-3 control-label">
                        @Html.LabelFor(model => model.idAfinidad)
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.idAfinidad, Model.listaAfinidades, new { @class = "form-control", @id = "dpxAfinidades" })
                        @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationMessageFor(model => model.idAfinidad, "", new { @class = "text-danger" }).ToHtmlString()))
                    </div>
                </div>

            </div>
        </div>

        <div id="dijkstraResults">
            <p>Camino: </p>
            
            <div id="txtHostnames">
               @Html.DisplayFor(model => model.cRutaHostnames) 
            </div>

            <table class="table table-condensed dataTable m-0">
                <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.listaEnlacesPath.FirstOrDefault().idEnlace)</th>
                    <th>@Html.DisplayNameFor(model => model.listaEnlacesPath.FirstOrDefault().cNombre)</th>
                    <th>@Html.DisplayNameFor(model => model.listaEnlacesPath.FirstOrDefault().nBandwidth)</th>
                    <th>BW Utilizado (Mbps)</th>
                    <th>BW Utilizado (%)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.listaEnlacesPath)
                {
                    <tr>
                        <td>@Html.DisplayFor(model => item.idEnlace)</td>
                        <td>@Html.DisplayFor(model => item.cNombre)</td>
                        <td>@Html.DisplayFor(model => item.nBandwidth)</td>
                        <td>@(item.nBandwidth - item.nBandwidthDisponible)</td>
                        <td>@((item.nBandwidth - item.nBandwidthDisponible)/item.nBandwidth*100)</td>
                    </tr>
                }

                </tbody>
            </table>

        </div>

    </div>

    <div class="modal-footer">

        <a class="btn btn-info pull-left" id="runDijkstra">Ejecutar Algoritmo</a>
        <button class="btn" data-dismiss="modal">Cerrar</button>
        <a class="btn btn-primary" id="submitCSPF">Guardar</a>
    </div>
}

<script>
    $(document).ready(function () {
        //Inicializa todos los tooltips
        $('[data-toggle="tooltip"]').tooltip();
        var t = $('.dataTable').DataTable();
        //TODO: Agregar a DataTables a la lista de dependencias del layout
        //TODO: Disable el boton de guardar

        //Evento para ejecutar el algoritmo de Dijkstra server-side
        $('#runDijkstra').click(function() {
            var form = $("#DataFormCSPF")[0];
            var formData = new FormData(form);
            $.ajax({
                url: '@Url.Action("_EjecutarDijkstra", new { controller = "Enrutamiento" })',
                type: 'POST',
                data: formData,
                success: function (result) {
                    if (result.success) {
                        $("#txtHostnames").html(result.node_string);
                        t.clear();
                        //Popular la tabla de dijkstraResults
                        result.path.each(function () {
                            t.row.add(
                                [
                                    this.idEnlace,
                                    this.cNombre,
                                    this.nBandwidth,
                                    parseFloat(this.nBandwidth) - parseFloat(this.nBandwidthDisponible),
                                    (parseFloat(this.nBandwidth) - parseFloat(this.nBandwidthDisponible)) / this.nBandwidth * 100
                                ]).draw();
                        });
                        //TODO: enable boton de guardar

                    } else {
                        //
                    }
                },
                error: function (error) { $("#error").html(error); }
            });

        });


        $("#submitCSPF").click(function () {
            var form = $("#DataFormCSPF")[0];
            var formData = new FormData(form);
            $.ajax({
                url: '@Url.Action("_CrearCSPF", new { controller = "Enrutamiento" })',
                type: 'POST',
                //contentType: false,
                //processData: false,
                data: formData,
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        window.location.reload(true);   //refresh page
                        $.Notification.autoHideNotify('success', 'top right', 'Aviso:', 'Los cambios han sido guardados exitosamente.');
                    } else {
                        $('#myModalContent').html(result);
                        $.Notification.autoHideNotify('error', 'top right', 'Algo salió mal...', 'Los cambios no pudieron ser guardados.');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $("#error").html(jqXHR.responseText);
                    console.log(jqXHR.responseText);
                    $.Notification.autoHideNotify('error', 'top right', 'Algo salió mal...', 'Los cambios no pudieron ser guardados.');
                }
            });
        });
    });
</script>

